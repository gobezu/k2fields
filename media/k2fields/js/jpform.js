//$Copyright$

var JPForm = new Class({
        Implements: [Options, Events],

        options: {
                multiValueSeparator: '%%',
                assignName: false
        },

        initialize: function(options) {
                this.setOptions(options);
        },

        createListSelect: function(values, valName, txtName, id, name, firstElementTxt, isMultiple, size, place, imgFolder) {
                if (isMultiple && name) {
                        name += '[]';
                }

                return this._createListElement('select', values, {id:id, name:name, firstElement:firstElementTxt, multiple:isMultiple?'multiple':'', size:size}, valName, txtName, undefined, place, imgFolder);
        },

        createListInput: function(type, values, attrs, place, valName, txtName, imgName) {
                if (!attrs) {
                        attrs = {};
                }

                attrs['type'] = type;

                var result = this._createListElement(type, values, attrs, valName, txtName, imgName, place);

                if (type == 'radio' && attrs['clearopt'] == 'button') {
                        new Element('a', {
                                'href':'#',
                                'text':'Clear', 'class':'radioclear',
                                'events':{
                                        'click':function(e) {
                                                e = this._tgt(e);
                                                e = e.getParent('ul');
                                                this.resetElements(e);
                                                return false;
                                        }.bind(this)
                                }
                        }).inject(new Element('li').inject(place.getElement('ul')));
                }

                return result;
        },

        addValue: function(el, value, activate, caseSensitive, matchMethod, autoGenerated, group, place, imgFolder) {
                if (!el || !value) return;

                if (document.id(el)) {
                        el = document.id(el);
                }

                var val, type = typeof value;

                if (type == 'object' || type == 'array') {
                        val = value['value'];
                } else if (type == 'string') {
                        val = value;
                }

                if (this.existsValue(el, val, activate, caseSensitive, matchMethod, undefined, autoGenerated)) {
                        return;
                }

                var opt;

                type = el.get('tag');

                if (type == 'select') {
                        opt = this._createListElementOption(type, value, activate, undefined, undefined, undefined, undefined, group ? group : el, imgFolder);

                        return opt;
                } else if (type == 'input' && (el.get('type') == 'radio' || el.get('type') == 'checkbox')) {
                        var els = this.getSyblings(el, autoGenerated), id = this.generateId(el), lblPos = 'after';

                        if (els && els[els.length - 1].getPrevious()) {
                                if (els[els.length - 1].getPrevious().get('tag') == 'label') {
                                        lblPos = 'before';
                                }
                        }

                        var name = el.get('name');

                        if (name) name = name.replace(/\[\]$/, '');
                        else name = els[0].get('name');

                        opt = this._createListElementOption(el.get('type'), value, activate, id, name, lblPos, undefined, place, imgFolder);

                        if (opt.get('customvalueholder')) opt.set('customvalueholder', '');

                        return opt;
                } else {
                        return el.set('value', el.get('value') + val);
                }
        },

        createLabel: function(val, txt, img, forId) {
                var lbl = new Element('label',  {'for':forId});

                txt = txt || val;

                if (img) {
                        if (this['utility'] && typeof this.utility['loadImage'] == 'function') {
                                this.utility.loadImage(img, {alt:txt, title:txt}, lbl);
                        } else {
                                new Element('img', {src: img, alt:val, title:val}).inject(txt);
                        }
                } else {
                        lbl.set('html', txt);
                        // lbl.innerHTML = txt;
                }

                return lbl;
        },

        addValues: function(el, values, addElToResult, imgFolder) {
                values = Array.from(values);

                var type = el.get('tag'), result = [];

                if (addElToResult) {
                        if (type == 'select') {
                                result = el.options;
                        } else {
                                result = [el];
                        }
                }

                for (var i = 0; i < values.length; i++) {
                        result.push(this.addValue(el, values[i], undefined, undefined, undefined, true, undefined, undefined, imgFolder));
                }

                return result;
        },

        removeValue: function(el, val, caseSensitive, matchMethod) {
                if (!el) return;

                if (val == undefined) val = '';

                val = val.toString();

                el = document.id(el);

                var type = el.get('tag');
                var re = this._getPattern(val, caseSensitive, matchMethod);

                if (type == 'select') {
                        for (var i = 0, n = el.options.length; i < n; i++) {
                                if (re.test(el.options[i].value)) {
                                        if (el.options[i].selected) {
                                                el.selectedIndex = -1;
                                        }

                                        el.options[i] = null;

                                        break;
                                }
                        }
                } else if (type == 'input' && (el.get('type') == 'radio' || el.get('type') == 'checkbox')) {
                        var els = el.form.getElements('input[name='+el.get('name')+']');
                        var lbl;

                        els.each (function(el) {
                                if (re.test(el.get('value'))) {
                                        lbl = this._getInputLabel(els, el);
                                        if (lbl) lbl.dispose();
                                        el.dispose();
                                }
                        }.bind(this));
                } else {
                        if (re.test(el.get('value'))) {
                                el.set('value', '');
                        }

                }
        },

        resetElements: function(container, except) {
                if (!except) except = [];

                except = Array.from(except);

                var lookFor = 'id', look;

                if (except.length > 0 && typeof except[0] != 'string') lookFor = 'element';

//                eliminate all list valued fields additional list members
//                var p = this.getProxyFieldId(container.getElement('input,select,textarea'));
//                var els = container.getElements('.k2fcontainer');
//
//                if (els.length > 1 && this.chkOpt(p, 'list', ['normal', 'conditional'])) {
//                        els.each(function(el, i) { if(i>0) el.dispose(); });
//                }

                container.getElements('input,select,textarea').each(function(el) {
                        look = lookFor == 'id' ? (el.get('id') || el.get('name')) : el;
                        if (except.contains(look)) return;
                        if (!this.resetValue(el)) return;
                        el.fireEvent('change', [el]);
                }.bind(this));

                return container;
        },

        resetValue: function(el, autoGenerated) {
                if (!el) return el;

                el = document.id(el);

                var
                        type = el.get('tag'),
                        proxyField = this.getProxyFieldId(el),
                        cont = el.getParent('.k2fcontainer')
                        ;

                if (!proxyField) return false;

                if (cont && (cont = cont.getParent().getParent())) {
                        if (cont.getStyle('display') != 'none') {
                                var value = this.getDefaultValue(proxyField)

                                if (value !== null && value !== undefined && value != "") {
                                        return this.setValue(el, value, undefined, undefined, undefined, true);
                                }
                        }
                }

                if (type == 'select') {
                        for (var i = 0, n = el.options.length; i < n; i++) {
                                if (el.options[i].value == '') {
                                        el.options[i].selected = true;
                                } else {
                                        el.options[i].selected = false;
                                }
                        }
                } else if (type == 'input' && (el.get('type') == 'radio' || el.get('type') == 'checkbox')) {
                        var els = this.getSyblings(el, autoGenerated);

                        els.each (function(el) {
                                el.checked = false;
                        });
                } else if (type == 'input' && el.get('type') == 'text' || type == 'textarea') {
                        el.set('value', '');
                }

                el.fireEvent('change', [el]);

                return el;
        },

        setValue: function(el, val, caseSensitive, matchMethod, checkPart, autoGenerated) {
                if (!el) return el;

                if (typeof val == 'string' && val.indexOf(this.options.multiValueSeparator) > 0) {
                        val = val.split(this.options.multiValueSeparator);
                }

                if (typeOf(val) == 'array') {
                        for (var i = 0, n = val.length; i < n; i++) {
                                this.setValue(el, val[i], caseSensitive, matchMethod, checkPart, autoGenerated);
                        }

                        return el;
                }

                el = document.id(el);

                var type = el.get('tag');
                var re = this._getPattern(val, caseSensitive, matchMethod);

                if (checkPart == undefined) {
                        checkPart = 'value';
                }

                if (type == 'select') {
                        for (var i = 0, n = el.options.length; i < n; i++) {
                                if (re.test(el.options[i][checkPart])) {
                                        el.options[i].selected = true;
                                        break;
                                }
                        }
                } else if (type == 'input' && (el.get('type') == 'radio' || el.get('type') == 'checkbox')) {
                        var els = this.getSyblings(el, autoGenerated);
                        els.each (function(el) {
                                if (
                                        checkPart == 'value' && re.test(el.get('value'))
                                     || checkPart == 'text' && re.test(this._getInputLabel(els, el, true))
                                ) {
                                        el.checked = true;
                                }
                        }.bind(this));
                } else if (el.get('type') != 'file') {
                        el.set('value', val);

                        // need of manual propagation as change event isn't applied on hidden fields
                        if (el.get('type') == 'hidden') {
                                var valid = this.getOpt(el, 'valid'), mtd = valid ? 'set'+valid.capitalize()+'Value' : false;
                                if (mtd && this[mtd]) this[mtd](el);
                        }

                        if (el.retrieve('autocompleterdone')) {
                                el.retrieve('_ac_').isReverse = true;
                                el.fireEvent('keyup', [el]);
                        }
                }

                el.fireEvent('change', [el]);

                return el;
        },

        getValue: function(el, autoGenerated, isFlattened) {
                if (!el) return;

                if (isFlattened == undefined) {
                        isFlattened = false;
                }

                el = document.id(el);

                var type = el.get('tag'), val;

                if (type == 'select') {
                        if (el.multiple) {
                                val = [];

                                for (var i = 0; i < el.options.length; i++) {
                                        if (el.options[i].selected) {
                                                val.push(el.options[i].value);
                                        }
                                }

                                if (val.length == 0) val = undefined;
                        } else {
                                val = el.options[el.selectedIndex]['value'];
                        }
                } else if (type == 'input' && (el.get('type') == 'checkbox' || el.get('type') == 'radio')) {
                        var els = this.getSyblings(el, autoGenerated);

                        val = [];

                        els.each(function(e) {
                                if (e.checked) {
                                        if (el.get('type') == 'checkbox') {
                                                val.push(e.get('value'));
                                        } else {
                                                val = e.get('value');
                                        }
                                }
                        });

                        if (val.length == 0) {
                                val = undefined;
                        }
                } else {
                        val = el.get('value').trim();

                        if (el.get('alt') && el.get('alt') == val && el.hasClass('hint')) {
                                val = '';
                        }
                }

                if (isFlattened && typeOf(val) == 'array') {
                        val = val.join(this.options.multiValueSeparator);
                }

                return val;
        },

        existsValue: function(el, value, activate, caseSensitive, matchMethod, checkPart, autoGenerated) {
                return this.existsValues(el, value, false, activate, caseSensitive, matchMethod, checkPart, autoGenerated);
        },

        existsValues: function(el, values, all, activate, caseSensitive, matchMethod, checkPart, autoGenerated) {
                if (!el) return;

                el = document.id(el);

                var type = el.get('tag');

                values = Array.from(values);

                if (all == undefined) all = false;

                if (activate == undefined) activate = false;

                if (checkPart == undefined) checkPart = 'value';

                var vals = [];

                if (type == 'select') {
                        for (var i = 0; i < el.options.length; i++) vals.push(el.options[i][checkPart]);
                } else if (type == 'input' && (el.get('type') == 'radio' || el.get('type') == 'checkbox')) {
                        var els = this.getSyblings(el, autoGenerated);

                        els.each(function(e) {
                                if (checkPart == 'value') vals.push(e.value);
                                else if (checkPart == 'text') vals.push(this._getInputLabel(els, e, true));
                        }.bind(this));
                } else {
                        vals.push(el.get('value').trim());
                }

                var found, re, value;

                for (var i = 0; i < values.length; i++) {
                        value = values[i];
                        re = this._getPattern(value, caseSensitive, matchMethod);
                        found = false;

                        for (var j = 0; j < vals.length; j++) {
                                found = re.test(vals[j]);

                                if (found) break;
                        }

                        if (found) {
                                if (activate) this.setValue(el, value, caseSensitive, matchMethod, checkPart, autoGenerated);

                                if (!all || i == values.length - 1) return true;
                        } else if (all) {
                                return false;
                        }
                }

                return false;
        },

        getSyblings: function(el, autoGenerated) {
                el = document.id(el);

                if (!el) return [];

                if (autoGenerated == undefined) {
                        autoGenerated = false;
                }

                if (!autoGenerated) {
                        var n = el.get('name');

                        if (n) {
                                n = n.replace(/\[\]$/, '');
                                return el.form.getElements('input[name^='+n+']').filter(function(item,index){
                                        return item.get('type') == el.get('type');
                                }.bind(this));
                        }
                }

                if (el.getParent() && el.getParent().get('tag') == 'li') {
                        if (el.getParent().getParent().get('tag') == 'ul') {
                                return el.getParent().getParent().getElements('input');
                        }
                }

                var curr = el, prev = curr.getPrevious(), result = [];

                while (prev && ['input', 'label'].contains(prev.get('tag'))) {
                        curr = prev;
                        prev = prev.getPrevious();
                }

                while (curr && ['input', 'label'].contains(curr.get('tag'))) {
                        if (curr.get('tag') == 'input') {
                                result.push(curr);
                        }

                        curr = curr.getNext();
                }

                return result;
        },

        _getInputLabel: function(els, el, isText) {
                var lbl = '';

                var type = el.get('tag');

                if (type == 'input') {
                        if (els[0].getPrevious() && els[0].getPrevious().get('tag') == 'label') {
                                lbl = el.getPrevious();
                        } else if (els[els.length - 1].getNext() && els[els.length - 1].getNext().get('tag') == 'label') {
                                lbl = el.getNext();
                        } else {
                                lbl = el;
                        }
                } else if (type == 'option') {
                        lbl = el;
                }

                if (lbl) {
                        type = lbl.get('tag');

                        if (isText) {
                                if (type == 'label') {
                                        lbl = lbl.get('html').trim();
                                        // lbl = lbl.innerHTML.trim();
                                } else if (type == 'option') {
                                        lbl = lbl.text;
                                } else if (type == 'input') {
                                        lbl = lbl.value;
                                }
                        }
                }

                return lbl;
        },

        // type, value, false, id, name, undefined, attrs
        _createListElementOption: function(type, value, activate, id, name, lblPos, attrs, place, imgFolder) {
                var opt;

                if (type == 'select') {
                        opt = new Option(value.text, value.value);
                        opt = document.id(opt);
                        opt.set('html', value.text);
                        // opt.innerHTML = value.text;

                        if (activate) {
                                opt.set('selected', true);
                        }

                        if (place) {
                                opt.inject(place);
                        }

                        if (value['disabled']) {
                                opt.set('disabled', 'disabled');
                        }

                        var img = value.img;

                        if (img) {
                                img = this.utility.loadImage(img);
                        } else {
                                if (imgFolder) {
                                        var v = this.utility.normalizePath(value.value);
                                        img = imgFolder.replace(/%value%/g, v);
                                        img = this.utility.loadImage(img);
                                }
                        }
                        if (img) opt.set('data-img', img.get('_id_'));
                } else {
                        if (!attrs) {
                                attrs = {};
                        }

                        attrs['id'] = id;
                        attrs['type'] = type;

                        if (name) {
                                if (type == 'checkbox') {
                                        name += '[]';
                                }

                                attrs['name'] = name;
                        }

                        attrs['value'] = value.value;

                        opt = new Element('input', attrs);

                        if (activate) {
                                opt.set('checked', true);
                        }

                        var lbl = this.createLabel(value.value, value.text, value.img, id);

                        if (lblPos == undefined && attrs.hasOwnProperty('labelPos')) {
                                lblPos = attrs['labelPos'];
                        }

                        if (place) {
                                place = new Element('li').inject(place);
                        }

                        if (lblPos == 'left' || lblPos == 'before') {
                                if (place) {
                                        lbl.inject(place);
                                        opt.inject(place);
                                } else {
                                        opt = [lbl, opt];
                                }
                        } else {
                                if (place) {
                                        opt.inject(place);
                                        lbl.inject(place);
                                } else {
                                        opt = [opt, lbl];
                                }
                        }

                        if (type == 'radio') {
                                opt.addEvent('change', function(e) {
                                        e = this._tgt(e);

                                        if (e.checked) {
                                                var els = this.getSyblings(e);

                                                els.each(function(el) {
                                                        if (e != el) {
                                                                el.checked = false;
                                                        }
                                                });
                                        }
                                }.bind(this));
                        }
                }

                return opt;
        },

        getValues: function(src) {
                if (!src || src.length == 0 || typeOf(src) == 'array') return src;

                src = src.match(/^url\:\(([^\)]+)\)/);

                if (!src) return [{'value':'', 'text':'Invalid value reference'}];

                src = src[1];

                src = src.replace(/\&amp\;/g, '&');

                new Request.JSON({
                        url: src,
                        async: false, /** @todo: improve by doing the UI construction by a callback **/
                        onComplete: function(response){
                                src = response;
                        }.bind(this)
                }).send();

                return src;
        },

        /**
         * value member with label attribute is assumed to be grouping call,
         * - in case of select optgroup
         * - in case of raido/checkbox internal ul
         * attrs = {firstElement:'...', multiple:'multiple', size:size}
         */
        _createListElement: function(type, values, attrs, valName, txtName, imgName, place, imgFolder) {
                if (!values || values.length == 0) return;

                values = this.getValues(values);

                var el, value, grp, pos = 0, id, name;

                if (attrs['id']) {
                        id = attrs['id'];
                }

                if (attrs['name']) {
                        name = attrs['name'];
                }

                if (type == 'select') {
                        el = new Element('select');

                        if (attrs && attrs['multiple']) {
                                el.set('multiple', attrs['multiple']);

                                if (!attrs['size']) {
                                        attrs['size'] = 4;
                                }
                        }

                        if (attrs['size'] && attrs['size'] > 0) {
                                el.set('size', attrs['size']);
                        }

                        if (attrs['firstElement']) {
                                value = {text:attrs['firstElement'], value:'', img:false};
                                this.addValue(el, value);
                        }

                        if (id) el.set('id', id);
                        if (name) el.set('name', name);
                } else {
                        var clrVal = {};
                        clrVal[!valName ? 'value' : valName] = '';
                        clrVal[!txtName ? 'text' : txtName] = 'None';

                        if (attrs['clearopt'] == 'firstempty') {
                                values = [clrVal].combine(values);
                        } else if (attrs['clearopt'] == 'lastempty') {
                                values.push(clrVal)
                        }

                        value = this._getValue(values, 0, valName, txtName, imgName);

                        if (place) {
                                var cls = this.getProxyFieldId(id).replace(this.options.pre, '');
                                place = new Element('ul', {'class':'lel xf' + cls}).inject(place);
                        }

                        if (place && (type == 'checkbox' || type == 'radio')) {
                                var placeH = new Element('div', {'class':'skin skin-minimal k2fchk'});
                                placeH.inject(place.getParent());
                                placeH.grab(place);
                        }

                        if (type == 'radio' && !name) name = id;

                        el = this._createListElementOption(type, value, false, id, name, undefined, attrs, place, imgFolder);
                        pos = 1;
                }

                while (pos < values.length) {
                        value = this._getValue(values, pos, valName, txtName, imgName);

                        if (typeof value == 'string') {
                                if (type == 'select') {
                                        grp = new Element('optgroup', {'label':value}).inject(el);
                                }
                                // TODO: consider ways to deal in case of none select
                                pos++;
                                continue;
                        }

                        this.addValue(el, value, undefined, undefined, undefined, true, grp, place, imgFolder);

                        pos++;
                }

                if (place && type == 'select') {
                        el.inject(place);
                }

                return el;
        },

        getContainer: function(field) {
                if (typeOf(field) == 'array') {
                        field = field[0];
                }

                if (field.getParent()
                &&  field.getParent().get('tag') == 'li'
                &&  field.getParent().getParent().get('tag') == 'ul') {
                        field = field.getParent().getParent();
                        return field.getParent() ? field.getParent() : field;
                }

                return field.getParent();
        },

        _getValue: function(values, pos, valName, txtName, imgName) {
                if (!valName) {
                        valName = 'value';
                }

                if (!txtName) {
                        txtName = 'text';
                }

                if (!imgName) {
                        imgName = 'img';
                }

                var value = values[pos], val, txt, img, disabled = false;

                if (typeof value == 'object') {
                        if (value.hasOwnProperty('label')) {
                                return value['label'];
                        }

                        val = value[valName];
                        txt = value.hasOwnProperty(txtName) ? value[txtName] : val;
                        if (!txt) txt = val;
                        img = value.hasOwnProperty(imgName) ? value[imgName] : false;
                        if (value.hasOwnProperty('disabled')) disabled = true;
                } else {
                        val = txt = value;
                        img = false;
                }

                val = {value:val, text:txt, img:img, disabled:disabled};

                return val;
        },

        _getPattern: function(val, caseSensitive, matchMethod) {
                if (caseSensitive == undefined) {
                        caseSensitive = false;
                }

                if (matchMethod == undefined) {
                        matchMethod = 'full';
                }

                val = Array.from(val);

                for (var i = 0; i < val.length; i++) val[i] = val[i].toString().escapeRegExp();

                val = val.join('|');

                var re;

                re = new RegExp(
                        (matchMethod == 'full' || matchMethod == 'pre' ? '^' : '') + val +
                        (matchMethod == 'full' || matchMethod == 'post' ? '$' : ''),
                        (caseSensitive ? '' : 'i')
                );

                return re;
        },

        autoFill: function(form, dataSrc, re) {
                form = document.id(form);

                if (!dataSrc) dataSrc = document.location.href;

                var data = dataSrc.fromQueryString(), val, el;

                for (var key in data) {
                        if (typeof key != 'string') continue;

                        if (re && !re.test(key)) continue;

                        val = data[key];

                        if (typeof val != 'string') continue;

                        /**
                         * @@todo: as we go down the road of human readable form
                         * names we need to be able to translate back and forth
                         * the form names and also in case of more complex/composite
                         * field types need to be able to address internal elements.
                         *
                         * Note: since this transaltion logic is needed on server side
                         * as well its better to get supplied by such translations
                         * from server in order not to duplicate code
                         */
                        el = form.getElement('[name='+key+']');

                        if (el) {
                                val = decodeURIComponent(val).replace(/\+/, ' ');
                                this.setValue(el, val);
                                this.fireEvent('change', [el]);
                        }
                }
        },

        completers:{},

        autoComplete: function(fld, createCompleter, holder, submitted, position, propagate, value) {
                var proxyField;

                if (createCompleter) {
                        proxyField = fld;

                        if (!holder) {
                                holder = this.getValueHolder(fld);
                        }

                        var opts = {type:'text'}, size = this.getOpt(proxyField, 'size');

                        if (size) opts['size'] = size;

                        if (!submitted) opts['ignore'] = true;

                        position = !submitted ? false : position || 0;

                        fld = this.ccf(proxyField, value, position, '', '', holder, 'input', opts, undefined, undefined, false, submitted, true);
                        fld = fld[0];
                } else {
                        proxyField = this.getOpt(fld, 'subfieldof');

                        if (!proxyField) {
                                proxyField = this.getProxyFieldId(fld);
                        }

                        proxyField = document.id(proxyField);
                }

                var tag = fld.get('tag');

                if ((tag != 'input' ||  fld.get('type') != 'text') && tag != 'textarea')  return false;

                var acMode = this.getOpt(
                        this.isType(proxyField, ['map', 'list', 'basic']) ? proxyField : fld,
                        'autocomplete'
                );

                if (!['m', 's', 'e'].contains(acMode)) return false;

                if (fld.retrieve('autocompleterdone')) return fld;

                var
                        isSubfield = this.getOpt(proxyField, 'subfieldof'),
                        id = (isSubfield ? isSubfield : proxyField.get('id')).match(new RegExp('^'+this.options.pre+'(\\d+)'))[1],
                        url = this.options.base+'index.php?option=com_k2fields&view=field&task=autocomplete&id='+id,
                        pos = isSubfield ? this.getOpt(proxyField, 'position') : this.getOpt(fld, 'position'),
                        minLength = this.getOpt(proxyField, 'acminchars', null, this.options.acminchars || 3),
                        maxChoices = this.getOpt(proxyField, 'acmaxitems', null, this.options.acmaxitems || 8)
                        ;

                url += '&search='+(this.isMode('search') || this.isMode('edit') ? '1' : '0');
                url += '&type='+this.getOpt(proxyField, 'valid');
                url += '&method='+(acMode ? acMode : 'm');

                if (pos) url += '&position='+pos;

                var jpc = new JPCompleter(fld, url, this, propagate, {
                        postVar: 'value',
                        minLength: minLength,
                        maxChoices: maxChoices,
                        autoSubmit: false,
                        cache: true,
                        delay: 300,
                        filterSubset: acMode == 'm',
                        indicatorClass:'progress'
                        //, width: 350
                });

                var coId = this.getProxyFieldId(fld);

                this.completers[coId] = jpc;

                fld.store('autocompleterdone', true);

                return fld;
        }
});

var JPCompleter = new Class({
        Extends: Autocompleter.Request.JSON,
        k2f:undefined,
        fld:undefined,
        currChoice:{value:'',ovalue:''},
        propagate:undefined,
        valid:'',
        isReverse:undefined,
        initialize: function(el, url, k2f, propagate, options) {
                options = Object.merge(options, {injectChoice:this._injector,ajaxOptions:{async:k2f.options.async}});
                this.fld = el;
                this.k2f = k2f;
                this.propagate = propagate;
                this.parent(el, url, options);
                this.valid = this.k2f.getOpt(this.fld, 'valid');
                document.id(this.fld).addEvents({
                        'blur' : function() {this.removeNonMatching();}.bind(this)
                });
                this.fld.store('_ac_', this);
        },
        query:function() {
                var af = this.k2f.getOpt(this.fld, 'autofield');

                if (af) {
                        var params = this.request.options.url.fromQueryString();

                        if (typeof af == 'function') {
                                var vals = af.bind(this.fld)(), p, v;

                                for (p in vals) {
                                        v = vals[p];
                                        if (v) params[p] = v;
                                }
                        } else if (typeof af == 'string') {
                                var id = document.id(af).get('value');

                                if (id) params.id = id;
                        }

                        params['reverse'] = this.isReverse ? 1 : 0;

                        this.request.options.url = this.request.options.url.applyParams(params);
                }

                this.parent();
        },
        removeNonMatching:function() {
                if (this.valid == 'k2item') {
                        if (this.fld.get('value') != this.currChoice.value) {
                                document.id(this.propagate['to']).set('value', '').store('ovalue', '');
                        } else {
                                document.id(this.propagate['to']).set('value', this.currChoice.ovalue).store('ovalue', this.currChoice.ovalue);
                        }
                }
        },
        addChoiceEvents: function(el) {
                var value = el.retrieve('token');

                switch (this.valid) {
                        case 'k2item':
                                this.currChoice = value;
                                break;
                        case 'list':
                                value = value.ovalue;
                                if (this.currChoice != value) {
                                        var holder = this.k2f.disposeValueHolder(this.fld);
                                        var proxyField = document.id(this.k2f.getProxyFieldId(this.fld));
                                        this.currChoice = value;
                                        this.k2f.createList(holder, proxyField, value);
                                }
                                break;
                        case 'map':
                                if (this.k2f.isMode('edit')) {
                                        value = value.ovalue.split(',');
                                        var els = this.k2f.ind(this.k2f.getProxyFieldId(this.fld), this.fld, 0);
                                        if (document.id(els[0]).get('value') != value[0] || document.id(els[1]).get('value') != value[1]) {
                                                document.id(els[0]).set('value', value[0]);
                                                document.id(els[1]).set('value', value[1]);
                                                document.id(els[1]).fireEvent('change', [document.id(els[1])]);
                                        }
                                }
                                break;
                        default:
                                if (this.isReverse) {
                                        this.fld.set('value', value.value);
                                }
                                break;
                }

                if (this.propagate) {
                        document.id(this.propagate['to']).set('value', value[this.propagate['attr']]);
                        document.id(this.propagate['to']).store('ovalue', value[this.propagate['attr']]);

                        if (this.propagate['event'])
                                document.id(this.propagate['to']).fireEvent(
                                        this.propagate['event'],
                                        [document.id(this.propagate['to'])]
                                );
                }

                this.isReverse = false;

                return this.parent(el);
        },
        _injector: function(token) {
                var value = typeof token == 'string' ? token : token.value;
                var choice = new Element('li', {'html': this.markQueryValue(value)});
                choice.inputValue = value;
                choice.store('token', token);
                this.addChoiceEvents(choice).inject(this.choices);
                return choice;
        }
});